package com.ibm.demo.plugin1.views;


import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.model.BaseWorkbenchContentProvider;
import org.eclipse.ui.model.WorkbenchLabelProvider;
import org.eclipse.ui.part.ViewPart;


/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class ContentView extends ViewPart {

	public static final String CONTENT_VIEW_ID="com.ibm.demo.plugin1.views.ContentView";
	public TreeViewer treeViewer;
	@Override
	public void createPartControl(Composite parent) {
		// TODO Auto-generated method stub
		treeViewer=new TreeViewer(parent,SWT.BORDER|SWT.MULTI|SWT.V_SCROLL);
		this.getSite().setSelectionProvider(treeViewer);
		treeViewer.setLabelProvider(new ContentTreeLabelProvider());
		treeViewer.setContentProvider(new ContentTreeContentProvider());
		treeViewer.setInput(null);
	}

	@Override
	public void setFocus() {
		// TODO Auto-generated method stub
		
	}
	//
	public class ContentTreeLabelProvider extends WorkbenchLabelProvider{
		
	}
	public class ContentTreeContentProvider extends BaseWorkbenchContentProvider{
		@Override
		public Object[] getChildren(Object element) {
			// TODO Auto-generated method stub
			return super.getChildren(element);
		}
		@Override
		public Object getParent(Object element) {
			// TODO Auto-generated method stub
			return super.getParent(element);
		}
		@Override
		public boolean hasChildren(Object element) {
			// TODO Auto-generated method stub
			return super.hasChildren(element);
		}
	}
}